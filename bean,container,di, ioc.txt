bean container 개념과 관계

bean 
컨테이너에의해 관리되는 객체를말합니다
기존 java에서는 class를 생성하여 new 키워드를 붙여주어 객체를생성하고 
메서드를 사용하는데
스프링에서는 이러한 bean들의 생성및 제어를 개발자가아닌 스프링이  생성, 구성및 관리하도록  
어노테이션이나 xml을 사용하여 정의해줍니다. 


container는 스프링 어플리케이션의 주요 구성요소중 하나로 
객체의 생성, 관리, 의존성주입(DI)을 담당하는데 
어플리케이션의 구성요소를 관리하고 제어하기위한 환경을 제공하고
객체의 생명주기를 관리하면서 애플리케이션의 확장성과 유지보수성을 높이는 역할을 수행합니다.


DI 의존관계, 의존성주입 (dependency injection )
객체간의 의존관계를 유연하고 관리하기 쉽게 만드는것을 목적으로 하는데
의존한다는것은
일반적으로 객체는 다른객체와 협력하거나 서비스를이용해 작업을 수행하는데
 A가 B 의기능을 사용하려면 A 는 B에 의존성을 가지게됩니다.
의존대상 B가 변하면 A에 영향을 미칠수있고 B 의기능이나 형식이 바뀌면 A의 기능에도 변화가 생길수 있다는 의미입니다

의존성주입이은 이러한 의존관계를 객체가 직접 생성하거나 관리하는것이 아니라
외부에서 주입하도록 하는것입니다.(컨테이너가 컴포넌트 역할을 한다)

의존성 주입장점
결합도가 낮아져서코드의  객체 간의 의존성이 줄어들어서 
변경에 민감하지 않은 유연한 코드를 작성가능. 유연성 ,재사용성이 증가
의존성을 가짜객체로 대체하여 테스트할 수 있어서 테스트가 용이해지고
코드의 의도를 더 명확하게 표현할 수 있어서 가독성이 좋아진다.

IOC  
Inversion of Control
제어의 역전 소프트웨어 개발에서 중요한 디자인원칙중 하나
제어의 흐름이 개발자가 작성한 코드에의해 결정되는것이 (직접생성하는것이) 아니라 외부에서 결정되도록 하는것 을 의미합니다.
 프로그램의 제어흐름이 역정되어 주도권이 개발자로부터 
프레임워크나 컨테이너같은 외부요소로 넘어간다는것 입니다.
이렇게 외부에서 객체를 관리하는 주체는 스프링컨테이너, 관리하는 객체는 bean입니다







